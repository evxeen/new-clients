import {Link, NavLink, Outlet, useParams } from 'react-router-dom';
import styles from './ClientDetail.module.scss';
import {useEffect, useState} from "react";

function ClientDetail() {
    const { id } = useParams();
    const [client, setClient] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        async function fetchClient() {
            try {
                const res = await fetch(`/api/clients/${id}`);
                const data = await res.json();
                setClient(data);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
            } finally {
                setLoading(false);
            }
        }

        fetchClient();
    }, [id]);

    if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
    if (!client) return <p>–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p>;

    return (
        <div className={styles.wrapper}>
            <div className={styles.header}>
                <Link className={styles.backLink} to="/">–ì–ª–∞–≤–Ω–∞—è</Link>
                <h2>{client.company}</h2>
            </div>

            <nav className={styles.nav}>
                <NavLink to={`/client/${id}`} end
                         className={({isActive}) => isActive ? styles.active : ''}>–ì–ª–∞–≤–Ω–∞—è</NavLink>
                <NavLink to={`/client/${id}/history`}
                         className={({isActive}) => isActive ? styles.active : ''}>–ò—Å—Ç–æ—Ä–∏—è</NavLink>
                <NavLink to={`/client/${id}/contacts`}
                         className={({isActive}) => isActive ? styles.active : ''}>–ö–æ–Ω—Ç–∞–∫—Ç—ã</NavLink>
                <NavLink to={`/client/${id}/edit`}
                         className={({isActive}) => isActive ? styles.active : ''}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</NavLink>
            </nav>

            <div className={styles.content}>
                <Outlet context={{client, setClient}}/>
            </div>
        </div>
    );
}

export default ClientDetail;


// import React, { useEffect, useState } from 'react';
// import { useParams, Link, useNavigate } from 'react-router-dom';
//
// function ClientDetail() {
//   const { id } = useParams();
//   const navigate = useNavigate();
//   const [client, setClient] = useState(null);
//   const [note, setNote] = useState('');
//   const [editedClient, setEditedClient] = useState(null);
//
//
//   useEffect(() => {
//     fetch('/api/clients')
//       .then((res) => res.json())
//       .then((data) => {
//         const found = data.find((c) => c.id === Number(id));
//         setClient(found);
//         setEditedClient(found); // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
//           console.log(found)
//       })
//       .catch((err) => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:', err));
//   }, [id]);
//
//   const handleAddNote = async () => {
//     if (!note.trim()) return;
//     const res = await fetch(`/api/clients/${id}/history`, {
//       method: 'POST',
//       headers: { 'Content-Type': 'application/json' },
//       body: JSON.stringify({ note }),
//     });
//
//     if (res.ok) {
//       const data = await res.json();
//       setClient({ ...client, history: data.history });
//       setNote('');
//     }
//   };
//
//   const handleChange = (field, value) => {
//     setEditedClient((prev) => ({ ...prev, [field]: value }));
//   };
//
//   const handleSave = async () => {
//     const res = await fetch(`/api/clients/${id}`, {
//       method: 'PUT',
//       headers: { 'Content-Type': 'application/json' },
//       body: JSON.stringify(editedClient),
//     });
//
//     if (res.ok) {
//       const data = await res.json();
//       setClient(data);
//       alert('–ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω');
//     } else {
//       alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
//     }
//   };
//
//     const handleDelete = async () => {
//         const confirmed = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?');
//         if (!confirmed) return;
//
//         try {
//             const res = await fetch(`/api/clients/${id}`, {
//                 method: 'DELETE',
//             });
//
//             if (res.ok) {
//                 alert('–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω');
//                 navigate('/'); // –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
//             } else {
//                 alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
//             }
//         } catch (err) {
//             console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', err);
//         }
//     };
//
//   if (!editedClient) return <div>–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
//
//   return (
//       <div>
//           <Link to="/">‚Üê –ù–∞–∑–∞–¥</Link>
//           <h2>
//               <input
//                   value={editedClient.company}
//                   onChange={(e) => handleChange('company', e.target.value)}
//               />
//           </h2>
//
//           <p>
//               <strong>–ú–µ–Ω–µ–¥–∂–µ—Ä:</strong>
//               <input
//                   value={editedClient.manager}
//                   onChange={(e) => handleChange('manager', e.target.value)}
//               />
//           </p>
//           <p>
//               <strong>–°—Ç–∞—Ç—É—Å:</strong>
//               <select
//                   value={editedClient.status}
//                   onChange={(e) => handleChange('status', e.target.value)}
//               >
//                   <option value="–°—Ç–∞—Ç—É—Å 1">–°—Ç–∞—Ç—É—Å 1</option>
//                   <option value="–°—Ç–∞—Ç—É—Å 2">–°—Ç–∞—Ç—É—Å 2</option>
//                   <option value="–°—Ç–∞—Ç—É—Å 3">–°—Ç–∞—Ç—É—Å 3</option>
//                   <option value="–°—Ç–∞—Ç—É—Å 4">–°—Ç–∞—Ç—É—Å 4</option>
//                   <option value="–°—Ç–∞—Ç—É—Å 5">–°—Ç–∞—Ç—É—Å 5</option>
//               </select>
//           </p>
//           <p>
//               <strong>Email:</strong>
//               <input value={editedClient.email} onChange={(e) => handleChange('email', e.target.value)}/>
//           </p>
//           <p>
//               <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong>
//               <input value={editedClient.phone} onChange={(e) => handleChange('phone', e.target.value)}/>
//           </p>
//           <p>
//               <strong>–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å:</strong>
//               <input
//                   value={editedClient.representative}
//                   onChange={(e) => handleChange('representative', e.target.value)}
//               />
//           </p>
//
//           <button onClick={handleSave}>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
//
//           <h3>–ò—Å—Ç–æ—Ä–∏—è:</h3>
//           {client.history?.length > 0 ? (
//               <ul>
//                   {client.history.map((entry, index) => (
//                       <li key={index}>
//                           <strong>{entry.date}:</strong> {entry.note}
//                       </li>
//                   ))}
//               </ul>
//           ) : (
//               <p>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞</p>
//           )}
//
//           <div style={{marginTop: '1em'}}>
//         <textarea
//             value={note}
//             onChange={(e) => setNote(e.target.value)}
//             rows={3}
//             placeholder="–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É..."
//             style={{width: '100%', padding: '8px'}}
//         />
//               <button onClick={handleAddNote} style={{marginTop: '0.5em'}}>
//                   –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
//               </button>
//           </div>
//
//           <button style={{marginTop: '20px', color: 'white', background: 'red', padding: '8px 16px'}}
//                   onClick={handleDelete}>
//               –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
//           </button>
//       </div>
//   );
// }
//
// export default ClientDetail;
