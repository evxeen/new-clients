const path = require('path');
const fs = require('fs');
const express = require('express');
const cors = require('cors');
const e = require("express");
const app = express();
const PORT = 3001;

const DB_PATH = path.join(__dirname, 'db.json');

app.use(cors());
app.use(express.json());

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
app.get('/api/clients', (req, res) => {
  try {
    if (fs.existsSync(DB_PATH)) {
      const allClients = fs.readFileSync(DB_PATH, 'utf-8');
      res.json(JSON.parse(allClients)); // ‚úÖ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    } else {
      res.json([]); // ‚úÖ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è db.json:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' }); // ‚úÖ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  }
});

// üìå –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
app.get('/api/clients/:id', (req, res) => {
  const id = Number(req.params.id);

  if (!fs.existsSync(DB_PATH)) {
    return res.status(404).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }

  const rawData = fs.readFileSync(DB_PATH, 'utf-8');
  let clients = [];

  try {
    clients = JSON.parse(rawData);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
  }

  const client = clients.find(c => c.id === id);

  if (client) {
    res.json(client);
  } else {
    res.status(404).json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

// üìå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
app.post('/api/clients', (req, res) => {
  const {company,
    activity,
    requirement,
    volume,
    code,
    address,
    site,
    email,
    phone,
    director,
    authority,
    manager,

  } = req.body;

  const now = new Date();
  now.setHours(now.getHours() + 3);

  const createDate = now.toISOString().replace('T', ' ').substring(0, 16); // "2025-07-02 14:25"

  const newClient = {
    id: Date.now(),
    createDate,
    company,
    activity,
    requirement,
    volume,
    code,
    address,
    site,
    email,
    phone,
    director,
    authority,
    manager,
    region: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    city: '–ü–æ–¥–æ–ª—å—Å–∫',
    suppliers: [],
    status: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞',
    contacts: [
      {name: '', lastName: '', post: null, phone: null, email: null}
    ],
    history: []
  };

// –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  let clients = [];
  if (fs.existsSync(DB_PATH)) {
    const rawData = fs.readFileSync(DB_PATH, 'utf-8');
    try {
      clients = JSON.parse(rawData);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
      clients = [];
    }
  }

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  clients.push(newClient);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
  fs.writeFile(DB_PATH, JSON.stringify(clients, null, 2), (err) => {
    if (err) console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ db:', err);
  });

  res.status(201).json(newClient);
});

app.post('/api/clients/:id/history', (req, res) => {
  const clientId = Number(req.params.id);
  const newHistoryItem = req.body;

  fs.readFile(DB_PATH, 'utf-8', (err, data) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    }

    let clients;
    try {
      clients = JSON.parse(data); // —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    }

    const clientIndex = clients.findIndex(c => c.id === clientId);
    if (clientIndex === -1) {
      return res.status(404).json({ message: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const client = clients[clientIndex];

    if (!Array.isArray(client.history)) {
      client.history = [];
    }

    client.history.push(newHistoryItem);

    fs.writeFile(DB_PATH, JSON.stringify(clients, null, 2), 'utf-8', (writeErr) => {
      if (writeErr) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª:', writeErr);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
      }

      res.json(client);
    });
  });
});

// üìå –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
app.put('/api/clients/:id', (req, res) => {
  const id = Number(req.params.id);
  const updatedData = req.body;

  if (!fs.existsSync(DB_PATH)) {
    return res.status(404).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }

  fs.readFile(DB_PATH, 'utf-8', (err, data) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });

    let clients;
    try {
      clients = JSON.parse(data);
    } catch (parseErr) {
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö' });
    }

    const index = clients.findIndex(c => c.id === id);
    if (index === -1) return res.status(404).json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    clients[index] = { ...clients[index], ...updatedData };

    fs.writeFile(DB_PATH, JSON.stringify(clients, null, 2), 'utf-8', (writeErr) => {
      if (writeErr) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏' });

      res.json(clients[index]);
    });
  });
});

// üì¶ –û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏
app.use(express.static(path.join(__dirname, 'client', 'dist')));

// üéØ SPA: –¥–ª—è –≤—Å–µ—Ö –ø—É—Ç–µ–π –æ—Ç–¥–∞—ë–º index.html
app.get(/\/(.*)/, (req, res) => {
  res.sendFile(path.join(__dirname, 'client', 'dist', 'index.html'));
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});