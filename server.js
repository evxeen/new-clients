const express = require('express');
const cors = require('cors');
const path = require('path');
const app = express();
const PORT = 3001;

app.use(cors());
app.use(express.json());

let clients = [
    {
        id: 1,
        company: '–û–û–û "–°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç"',
        manager: '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
        status: '–æ–∂–∏–¥–∞–µ—Ç –∑–≤–æ–Ω–∫–∞',
        email: 'contact@stroinvest.by',
        phone: '+375291112233',
        representative: '–°–µ—Ä–≥–µ–π –ü–∞–≤–ª–æ–≤',
        history: [
            { date: '2025-06-25 10:30', note: '–°–æ–∑–≤–æ–Ω–∏–ª–∏—Å—å, –∫–ª–∏–µ–Ω—Ç –ø–æ–ø—Ä–æ—Å–∏–ª –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' }
        ]
    },
    {
        id: 2,
        company: '–ó–ê–û "–ú–µ—Ç–∞–ª–ü—Ä–æ–º"',
        manager: '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.',
        status: '–≤ —Ä–∞–±–æ—Ç–µ',
        email: 'info@metalprom.ru',
        phone: '+375291234567',
        representative: '–û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
        history: [
            { date: '2025-06-26 12:00', note: '–û–±—Å—É–¥–∏–ª–∏ —É—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏' }
        ]
    }
];

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
app.get('/api/clients', (req, res) => {
    res.json(clients);
});

// üìå –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
app.get('/api/clients/:id', (req, res) => {
    const client = clients.find(c => c.id === parseInt(req.params.id));
    if (client) res.json(client);
    else res.status(404).json({ error: 'Client not found' });
});

// üìå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
app.post('/api/clients', (req, res) => {
    const { company, manager, status, email, phone, representative } = req.body;

    const newClient = {
        id: Date.now(),
        company,
        manager,
        status,
        email,
        phone,
        representative,
        history: []
    };

    clients.push(newClient);
    res.status(201).json(newClient);
});

// üìå –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
app.put('/api/clients/:id', (req, res) => {
    const client = clients.find(c => c.id === parseInt(req.params.id));
    if (!client) return res.status(404).json({ error: 'Client not found' });

    Object.assign(client, req.body);
    res.json(client);
});

// üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–∞
app.post('/api/clients/:id/history', (req, res) => {
    const client = clients.find(c => c.id === parseInt(req.params.id));
    if (!client) return res.status(404).json({ error: 'Client not found' });

    const { message } = req.body;
    const historyItem = { date: new Date().toISOString(), message };
    client.history.push(historyItem);
    res.status(201).json(historyItem);
});

// üìå –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
app.get('/api/stats', (req, res) => {
    const stats = {};
    clients.forEach(client => {
        const manager = client.manager || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        if (!stats[manager]) {
            stats[manager] = { total: 0, inWork: 0 };
        }
        stats[manager].total += 1;
        if (client.status !== '–Ω–æ–≤—ã–π') {
            stats[manager].inWork += 1;
        }
    });
    res.json(stats);
});

// üì¶ –û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏
app.use(express.static(path.join(__dirname, 'client', 'dist')));

// üéØ SPA: –¥–ª—è –≤—Å–µ—Ö –ø—É—Ç–µ–π –æ—Ç–¥–∞—ë–º index.html
app.get(/\/(.*)/, (req, res) => {
    res.sendFile(path.join(__dirname, 'client', 'dist', 'index.html'));
});

app.listen(PORT, '0.0.0.0', () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
