const path = require('path');
const fs = require('fs');
const express = require('express');
const cors = require('cors');
const {json} = require("express");
const e = require("express");
const app = express();
const PORT = 3001;

const db = path.join(__dirname, 'db.json');

app.use(cors());
app.use(express.json());

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
app.get('/api/clients', (req, res) => {
  try {
    if (fs.existsSync(db)) {
      const allClients = fs.readFileSync(db, 'utf-8');
      res.json(JSON.parse(allClients)); // ‚úÖ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    } else {
      res.json([]); // ‚úÖ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è db.json:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' }); // ‚úÖ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  }
});



// // üìå –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
// app.get('/api/clients/:id', (req, res) => {
//   const client = clients.find((c) => c.id === parseInt(req.params.id));
//   if (client) res.json(client);
//   else res.status(404).json({ error: 'Client not found' });
// });

// üìå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
app.post('/api/clients', (req, res) => {
  const {company,
    activity,
    requirement,
    volume,
    code,
    address,
    site,
    email,
    phone,
    director,
    authority,
  } = req.body;

  const newClient = {
    id: Date.now(),
    company,
    activity,
    requirement,
    volume,
    code,
    address,
    site,
    email,
    phone,
    director,
    authority,
    status: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞',
    contacts: [
      {post: null, phone: null, email: null}
    ],
    history: []
  };

// –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  let clients = [];
  if (fs.existsSync(db)) {
    const rawData = fs.readFileSync(db, 'utf-8');
    try {
      clients = JSON.parse(rawData);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
      clients = [];
    }
  }

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  clients.push(newClient);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
  fs.writeFile(db, JSON.stringify(clients, null, 2), (err) => {
    if (err) console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ db:', err);
  });

  res.status(201).json(newClient);
});

// üìå –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
// app.put('/api/clients/:id', (req, res) => {
//   const clientId = Number(req.params.id);
//   const updatedData = req.body;
//
//   const clientIndex = clients.findIndex((c) => c.id === clientId);
//   if (clientIndex === -1) return res.status(404).json({ message: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
//
//   // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, –∑–∞–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
//   const oldHistory = clients[clientIndex].history || [];
//   clients[clientIndex] = { ...updatedData, id: clientId, history: oldHistory };
//
//   res.json(clients[clientIndex]);
// });
//
// // üìå —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
// app.delete('/api/clients/:id', (req, res) => {
//   const id = parseInt(req.params.id);
//   const index = clients.findIndex(client => client.id === id);
//   if (index !== -1) {
//     clients.splice(index, 1);
//     res.sendStatus(200);
//   } else {
//     res.status(404).json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
//   }
// });
//
//
// // üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–∞
// app.post('/api/clients/:id/history', (req, res) => {
//   const clientId = Number(req.params.id);
//   const { note } = req.body;
//   const client = clients.find((c) => c.id === clientId);
//
//   if (!client) {
//     return res.status(404).json({ message: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
//   }
//
//   if (!client.history) {
//     client.history = [];
//   }
//
//   const date = new Date().toISOString().replace('T', ' ').substring(0, 16); // "2025-06-27 21:45"
//   client.history.push({ date, note });
//
//   res.status(201).json({ message: '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞', history: client.history });
// });
//

// üì¶ –û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏
app.use(express.static(path.join(__dirname, 'client', 'dist')));

// üéØ SPA: –¥–ª—è –≤—Å–µ—Ö –ø—É—Ç–µ–π –æ—Ç–¥–∞—ë–º index.html
app.get(/\/(.*)/, (req, res) => {
  res.sendFile(path.join(__dirname, 'client', 'dist', 'index.html'));
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});